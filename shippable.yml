#---------------------------------------------------------------#
#------------------------- Ops Resources -----------------------#
#---------------------------------------------------------------#

resources:
#################################################################
## Shared resources

# Automation scripts repo
  - name: infra_repo
    type: gitRepo
    integration: demo_github
    versionTemplate:
      sourceName: "aye0aye/ops"
      branch: master

##################################################################
#### AWS Provisioning Resources

# TEST AWS cluster
  - name: test_env_ecs
    type: cluster
    integration: demo_aws # replace with your AWS integration name
    versionTemplate:
      # replace with your Amazon ECS cluster name and region
      sourceName : ${CLUSTER_NAME}
      region: ${REGION}

## TEST AWS ALB target group
#  - name: test_alb     #required
#    type: loadBalancer #required
#    versionTemplate:
#      # replace with the ARN for your Amazon EC/2 Application Load Balancer Target Group
#      sourceName: "arn:aws:elasticloadbalancing:us-east-1:679404489841:targetgroup/ecs-test-tg/bc20de1be2dab77d"
#      method: application

# TEST environment config
  - name: test_params_ansible
    type: params
    versionTemplate:
      params:
        EC2_TAG_ROLE: "test_env_demo"
        EC2_TAG_TYPE: "ecs_container_instance"
        VPC_KEYPAIR_NAME: "us_east_1_key"
        EC2_VOLUME_SIZE: 30
        EC2_COUNT: 2
        EC2_INSTANCE_TYPE: "t2.micro"
        ECS_CLUSTER_NAME: "test_env_demo"
        ENVIRONMENT: "test"

# Output of TEST environment provisioning
  - name: test_env_info
    type: params
    versionTemplate:
      params:
        STATUS: "empty"

#
##################################################################
#### Kubernetes cluster on AWS resources
#
## Kubernetes cluster on AWS for use with managed Deploy job
#  - name: e2eshipdemo-cluster-kube
#    type: cluster
#    integration: ttrahan-kube # replace with your Kube integration name
#    pointer:
#      # replace with your Kubernetes cluster name and region
#      sourceName : "cluster"
#      region: "us-east-1"
#    flags:
#      - e2eShippableDemo
#      - kubernetes
#
## AWS CLI config - kops
#  - name: aws_cli_config_kube
#    type: cliConfig
#    integration: dr-aws-kops
#    pointer:
#      region: us-east-1
#    flags:
#      - e2eShippableDemo
#      - kubernetes
#
## SSH keys for use in KOPS provisioning
#  - name: sshkey_kops
#    type: integration
#    integration: kp-us-east-1-kops
#    flags:
#      - e2eShippableDemo
#      - kubernetes
#
## Kube cluster config
#  - name: kube_cluster_config
#    type: params
#    version:
#      params:
#        CLUSTER_NAME: "cluster.prod.example-kube-cluster.com"
#        KOPS_STATE_STORE: "s3://kube-cluster-state"
#        CLOUD: "aws"
#        ZONES: "us-east-1c"
#        MASTER_ZONES: "us-east-1c"
#        MASTER_SIZE: "m3.medium"
#        NODE_SIZE: "t2.medium"
#        NODE_COUNT: 2
#    flags:
#      - e2eShippableDemo
#      - kubernetes
#
## Kube cluster info
#  - name: kube_cluster_info
#    type: params
#    version:
#      params:
#        SEED: "initial placeholder"
#    flags:
#      - e2eShippableDemo
#      - kubernetes
#
##################################################################
#### Google Cloud - Devops Recipes account
#
## GKE cluster
#  - name: gke_cluster
#    type: cluster
#    integration: drship_gke    #replace with your Kubernetes integration name
#    pointer:
#      sourceName: "shipdemo-cluster"
#      namespace: devops-samples
#      region: us-central1-b
#

#
### PROD resources
#
## Terraform STATE for PROD
#  - name: prod_tf_state
#    type: state
#    flags:
#      - e2eShippableDemo
#
## PROD environment config
#  - name: prod_tf_config
#    type: params
#    version:
#      params:
#        EC2_REGION: "us-east-1"
#        EC2_TAG_ROLE: "ecs-shippable-aye0aye-prod"
#        EC2_TAG_TYPE: "ecs-container-instance"
#        EC2_VOLUME_SIZE: 30
#        EC2_COUNT: 2
#        # TF_STATE_FILE: "prod_tf_state"
#        STATE_RES_NAME: "prod_tf_info"
#        ECS_CLUSTER_NAME: "e2eshipdemo-cluster-ecs-prod"
#        ENVIRONMENT: "prod"
#    flags:
#      - e2eShippableDemo
#
## Output of TEST environment provisioning
#  - name: prod_tf_info
#    type: params
#    version:
#      params:
#        SEED: "initial_version"
#    flags:
#      - e2eShippableDemo
#
## PROD env - ECS cluster
#  - name: e2eshipdemo-cluster-ecs-prod
#    type: cluster
#    integration: dr-aws # replace with your AWS integration name
#    pointer:
#      # replace with your Amazon ECS cluster name and region
#      sourceName : "e2eshipdemo-cluster-ecs-prod"
#      region: "us-east-1"
#    flags:
#      - e2eShippableDemo
#
## PROD AWS ALB target group
#  - name: e2eshipdemo-alb-prod     #required
#    type: loadBalancer      #required
#    pointer:
#      # replace with the ARN for your Amazon EC/2 Application Load Balancer Target Group
#      sourceName: "arn:aws:elasticloadbalancing:us-east-1:679404489841:targetgroup/ecs-prod-tg/e71fc83fd6600421"
#      method: application
#    flags:
#      - e2eShippableDemo
#
## PROD replicas
#  - name: e2eshipdemo-replicas-ecs-prod
#    type: replicas
#    version:
#      count: 2
#    flags:
#      - e2eShippableDemo


#---------------------------------------------------------------#
#--------------------------- Ops Jobs --------------------------#
#---------------------------------------------------------------#

jobs:
# Provision TEST VMs and ECS cluster with Ansible
  - name: prov_test_ansible
    type: runSh
    dependencyMode: strict
    triggerMode: parallel
    steps:
      - IN: ami_secops_approved
      - IN: demo_aws_cli
        switch: off
      - IN: test_params_ansible
        switch: off
      - IN: demo_aws_pem
        switch: off
      - IN: test_vpc_info
        switch: off
      - IN: infra_repo
        switch: off
      - TASK:
          script:
            - sudo pip install boto3
            - pushd $(shipctl get_resource_state "infra_repo")
            - cd ./infra/provision-ecs-ansible
            - export STATE_RES_NAME="test_env_info"
            - export CLUSTER_RES_NAME="test_env_ecs"
            - export AMI_ID=$(shipctl get_resource_version_name ami_secops_approved)
            - shipctl replace ansible.cfg ./group_vars/ecs-cluster-vars.yml
            - ansible-playbook -v ansible-ecs-provision.yml
            - popd
      - OUT: test_env_info
        overwrite: true
      - OUT: test_env_ecs
        overwrite: true
    flags:
      - e2e_demo_app

# Deprovision TEST VMs and ECS cluster
  - name: deprov_test_ansible
    type: runSh
    steps:
      # - IN: auto_bvt
      #   switch: off
      - IN: prov_test_ansible
        switch: off
      - IN: demo_aws_cli
        switch: off
      - IN: test_params_ansible
        switch: off
      - IN: test_vpc_info
        switch: off
      - IN: demo_aws_pem
        switch: off
      - IN: infra_repo
        switch: off
      - IN: ami_secops_approved
        switch: off
      - TASK:
          script:
            - sudo pip install boto3
            - pushd $(shipctl get_resource_state "infra_repo")
            - cd ./infra/provision-ecs-ansible
            - export STATE_RES_NAME="test_env_info"
            - export CLUSTER_RES_NAME="test_env_ecs"
            - export AMI_ID=$(shipctl get_resource_version_name ami_secops_approved)
            - shipctl replace ansible.cfg ./group_vars/ecs-cluster-vars.yml
            - ansible-playbook -v ansible-ecs-terminate.yml
            - popd
      - OUT: test_env_info
        overwrite: true
      - OUT: test_env_ecs
        overwrite: true
    flags:
      - e2e_demo_app

#
## Provision Kubernetes cluster with KOPS
#  - name: prov_kube_cluster
#    type: runSh
#    steps:
#      - IN: aws_cli_config_kube
#        switch: off
#      - IN: sshkey_kops
#        switch: off
#      - IN: prod_vpc_conf
#        switch: off
#      - IN: ops_repo
#        switch: off
#      - IN: kube_cluster_config
#        switch: off
#      - OUT: kube_cluster_info
#      - TASK:
#        # install KOPS CLI
#        - script: |
#            wget -q -O kops https://github.com/kubernetes/kops/releases/download/1.7.0/kops-linux-amd64
#            chmod +x ./kops
#            sudo mv ./kops /usr/local/bin
#        # set aws variables for use by KOPS
#        - script: |
#            export AWS_ACCESS_KEY_ID=$(aws configure get aws_access_key_id)
#            export AWS_SECRET_ACCESS_KEY=$(aws configure get aws_secret_access_key)
#        # create Kubernetes cluster
#        - script: echo "---creating cluster---"
#          # update cluster spec with input parameters
#        - script: |
#            pushd ${OPS_REPO_STATE}/infra/provision-kube-kops
#            shipctl replace kube-cluster.yaml
#            cat kube-cluster.yaml
#          # check if cluster exist, create if not, replace otherwise
#        - script: |
#            if [[ ! $(kops get cluster --name "${CLUSTER_NAME}") ]]; then
#              echo "creating cluster"
#              kops create -f kube-cluster.yaml --name "${CLUSTER_NAME}"
#              kops create secret --name ${CLUSTER_NAME} sshpublickey admin -i $SSHKEY_KOPS_PUBLIC_KEY_PATH
#              echo "done creating cluster"
#            else
#              echo "replacing cluster"
#              kops replace -f kube-cluster.yaml --name "${CLUSTER_NAME}"
#              echo "done replacing cluster"
#            fi
#            popd
#          # provision Kubernetes cluster
#        - script: |
#            echo "---provisioning cluster---"
#            kops update cluster $CLUSTER_NAME --yes --state $KOPS_STATE_STORE --yes
#            echo "---cluster provisioning triggered---"
#          # save cluster info to state
#        - script: >
#            shipctl put_resource_state kube_cluster_info
#            CLUSTER_NAME ${CLUSTER_NAME}
#            KOPS_STATE_STORE ${KOPS_STATE_STORE}
#            CLOUD ${CLOUD}
#            MASTER_LOCATION ${MASTER_ZONES}
#    on_success:
#      - script: echo "SUCCESS"
#    on_failure:
#      - script: echo "FAILURE"
#    flags:
#      - e2eShippableDemo
#      - kubernetes
#
## Deprovision Kubernetes cluster with KOPS
#  - name: deprov_kube_cluster
#    type: runSh
#    steps:
#      - IN: prov_kube_cluster
#        switch: off
#      - IN: aws_cli_config_kube
#        switch: off
#      - IN: kube_cluster_config
#        switch: off
#      - TASK:
#        # install KOPS CLI
#        - script: |
#            wget -q -O kops https://github.com/kubernetes/kops/releases/download/1.7.0/kops-linux-amd64
#            chmod +x ./kops
#            sudo mv ./kops /usr/local/bin
#        # set aws variables for use by KOPS
#        - script: |
#            export AWS_ACCESS_KEY_ID=$(aws configure get aws_access_key_id)
#            export AWS_SECRET_ACCESS_KEY=$(aws configure get aws_secret_access_key)
#        # deprovision Kubernetes cluster
#        - script: echo "---deprovisioning cluster---"
#        - script: kops delete cluster $CLUSTER_NAME --yes --state $KOPS_STATE_STORE --yes
#        - script: echo "---cluster deprovisioning triggered---"
#    on_success:
#      - script: echo "SUCCESS"
#    on_failure:
#      - script: echo "FAILURE"
#    flags:
#      - e2eShippableDemo
#      - kubernetes


#
## Provision PROD VMs with Terraform
#  - name: prov_ecs_prod
#    type: runSh
#    steps:
#      - IN: prod_tf_state
#      - IN: ami_sec_approved
#      - IN: prod_vpc_conf
#        switch: off
#      - IN: aws_pem
#        switch: off
#      - IN: aws_creds
#        switch: off
#      - IN: ops_repo
#        switch: off
#      - TASK:
#        - script: shipctl copy_resource_file_from_state prod_tf_state terraform.tfstate .
#        - script: shipctl replace $OPS_REPO_STATE/infra/awsProdECS/terraform.tfvars
#        - script: |
#            terraform plan
#            terraform apply
#        - script: |
#            shipctl put_resource_state prod_tf_info PROD_ECS_INS_0_IP $(terraform output prod_ecs_ins_0_ip)
#            shipctl put_resource_state prod_tf_info PROD_ECS_INS_1_IP $(terraform output prod_ecs_ins_1_ip)
#            shipctl put_resource_state prod_tf_info PROD_ECS_INS_2_IP $(terraform output prod_ecs_ins_2_ip)
#            shipctl put_resource_state prod_tf_info PROD_ECS_CLUSTER_ID $(terraform output prod_ecs_cluster_id)
#            shipctl put_resource_state prod_tf_info $(terraform output REGION $REGION)
#        - script: shipctl refresh_file_to_out_path terraform.tfstate prod_tf_state
#      - OUT: e2eshipdemo-cluster-ecs-prod
#      - OUT: prod_tf_info
#      - OUT: prod_tf_state
#    on_success:
#      - script: echo "SUCCESS"
#    on_failure:
#      - script: echo "FAILURE"
#    always:
#      - script: . /build/IN/ops_repo/gitRepo/infra/shipUtil.sh && . /build/IN/ops_repo/gitRepo/infra/archiveState.sh infra/awsProdECS prod_tf_state
#    flags:
#      - e2eShippableDemo
#      - ecs
#
## PROD deployment to Amazon ECS
#  - name: e2eshipdemo-deploy-ecs-prod
#    type: deploy
#    steps:
#      - IN: e2eshipdemo-release-ecs-prod
#        switch: off
#      - IN: e2eshipdemo-params-ecs-prod
#      - IN: e2eshipdemo-img-options-ecs-prod
#      - IN: e2eshipdemo-replicas-ecs-prod
#      - IN: e2eshipdemo-cluster-ecs-prod
#      - IN: e2eshipdemo-alb-prod
#        applyTo:
#          - manifest: e2eshipdemo-manifest-ecs
#            image: e2eshipdemo-img-ecs
#            port: 80
#      - TASK: managed
#        # deployMethod: replace
#    flags:
#      - e2eShippableDemo
#      - ecs
#

## Deprovision PROD VMs and ECS cluster
#  - name: de_prov_ecs_prod
#    type: runSh
#    steps:
#      - IN: prov_ecs_prod
#        switch: off
#      - IN: prod_tf_state
#      - IN: prod_vpc_conf
#        switch: off
#      - IN: aws_creds
#        switch: off
#      - IN: ops_repo
#        switch: off
#      - IN: ami_sec_approved
#        switch: off
#      - TASK:
#        - script: . /build/IN/ops_repo/gitRepo/infra/shipUtil.sh
#        - script: . /build/IN/ops_repo/gitRepo/infra/awsProdECS/provProdInfra.sh destroy
#      - OUT: prod_tf_state
#    on_success:
#      - script: echo "SUCCESS"
#    on_failure:
#      - script: echo "FAILURE"
#    always:
#      - script: . /build/IN/ops_repo/gitRepo/infra/shipUtil.sh && . /build/IN/ops_repo/gitRepo/infra/archiveState.sh infra/awsProdECS prod_tf_state
#    flags:
#      - e2eShippableDemo
#      - ecs
#
